---
swagger: '2.0'
info:
  description: The BoomFi Merchants API provides a set of endpoints for merchants
    to manage their accounts, transactions, and more.
  title: BoomFi Merchants API
  contact:
    name: API Support
    email: support@boomfi.xyz
  version: '1.0'
host: mapi.boomfi.xyz
paths:
  "/orgs":
    get:
      security:
      - ApiKeyAuth: []
      description: This endpoint retrieves information about the organization.
      consumes:
      - application/json
      produces:
      - application/json
      tags:
      - Organization
      summary: Get Organization
      responses:
        '200':
          description: OK
          schema:
            "$ref": "#/definitions/models.Org"
        '400':
          description: Bad Request
          schema:
            "$ref": "#/definitions/internal.ErrorResponse"
        '401':
          description: Unauthorized
          schema:
            "$ref": "#/definitions/internal.ErrorResponse"
        '500':
          description: Internal Server Error
          schema:
            "$ref": "#/definitions/internal.ErrorResponse500"
    put:
      security:
      - ApiKeyAuth: []
      description: This endpoint updates information about an organization.
      consumes:
      - application/json
      produces:
      - application/json
      tags:
      - Organization
      summary: Update Organization
      parameters:
      - description: body
        name: body
        in: body
        required: true
        schema:
          "$ref": "#/definitions/orgs.UpdateOrgRequest"
      responses:
        '200':
          description: OK
          schema:
            "$ref": "#/definitions/models.Org"
        '400':
          description: Bad Request
          schema:
            "$ref": "#/definitions/internal.ErrorResponse"
        '401':
          description: Unauthorized
          schema:
            "$ref": "#/definitions/internal.ErrorResponse"
        '500':
          description: Internal Server Error
          schema:
            "$ref": "#/definitions/internal.ErrorResponse500"
  "/accounts":
    get:
      security:
      - ApiKeyAuth: []
      description: Retrieve all available accounts on the system.
      consumes:
      - application/json
      produces:
      - application/json
      tags:
      - Accounts
      summary: List Accounts
      responses:
        '200':
          description: OK
          schema:
            "$ref": "#/definitions/internal.PaginatedResponse-accounts_OrgSettlementAccountResponse"
        '400':
          description: Bad Request
          schema:
            "$ref": "#/definitions/internal.ErrorResponse"
        '500':
          description: Internal Server Error
          schema:
            "$ref": "#/definitions/internal.ErrorResponse500"
  "/customers":
    get:
      security:
      - ApiKeyAuth: []
      description: Retrieve a paginated list of customers for a given organization, with optional sorting and filtering parameters.
      produces:
      - application/json
      tags:
      - Customers
      summary: List Customers
      parameters:
      - type: integer
        name: itemsPerPage
        description: The number of items to be included in each page of the API response. 
        in: query
      - type: integer
        name: page
        description: The page number of the results to be retrieved. 
        in: query
      - type: string
        name: search
        description: The search query or keyword that filters the results returned by the API. 
        in: query
      - enum:
        - first-time
        - repeat
        type: string
        description: Specifies a type or category for filtering the results.
        name: type
        in: query
      responses:
        '200':
          description: OK
          schema:
            "$ref": "#/definitions/internal.PaginatedResponse-customers_ResponseCustomer"
    post:
      security:
      - ApiKeyAuth: []
      description: This endpoint is used to create a new customer. It requires a payload containing details about the customer.
      consumes:
      - application/json
      produces:
      - application/json
      tags:
      - Customers
      summary: Create a Customer
      parameters:
      - description: Create Customer Request
        name: request
        in: body
        required: true
        schema:
          "$ref": "#/definitions/customers.CreateCustomerRequest"
      responses:
        '200':
          description: OK
          schema:
            "$ref": "#/definitions/customers.ResponseCustomer"
        '400':
          description: Bad Request
          schema:
            "$ref": "#/definitions/internal.ErrorResponse"
        '500':
          description: Internal Server Error
          schema:
            "$ref": "#/definitions/internal.ErrorResponse500"
  "/customers/{customerID}":
    get:
      security:
      - ApiKeyAuth: []
      description: This endpoint is used to retrieve a specific customer identified by its unique `customerID`. 
      produces:
      - application/json
      tags:
      - Customers
      summary: Get Customer by ID
      parameters:
      - type: string
        description: Unique identifier of the customer.
        name: customerID
        in: path
        required: true
      responses:
        '200':
          description: OK
          schema:
            "$ref": "#/definitions/internal.Response-customers_ResponseCustomer"
        '400':
          description: Bad Request
          schema:
            "$ref": "#/definitions/internal.ErrorResponse"
        '500':
          description: Internal Server Error
          schema:
            "$ref": "#/definitions/internal.ErrorResponse500"
    delete:
      security:
      - ApiKeyAuth: []
      description: This endpoint is used to delete a specific customer identified by its unique `customerID`. 
      produces:
      - application/json
      tags:
      - Customers
      summary: Delete Customer
      parameters:
      - type: string
        description: Unique identifier of the customer.
        name: customerID
        in: path
        required: true
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
          schema:
            "$ref": "#/definitions/internal.ErrorResponse"
        '500':
          description: Internal Server Error
          schema:
            "$ref": "#/definitions/internal.ErrorResponse500"
  "/events":
    get:
      security:
      - ApiKeyAuth: []
      description: Retrieve a paginated list of events for a given organization, with
        optional sorting and filtering parameters
      produces:
      - application/json
      tags:
      - Events
      summary: List events for an organization
      parameters:
      - type: string
        name: after
        description: Filters events to include only those that occurred after the specified timestamp. 
        in: query
      - type: string
        name: before
        description: Filters events to include only those that occurred before the specified timestamp. 
        in: query
      - maximum: 100
        minimum: 1
        type: integer
        name: limit
        description: Specifies the maximum number of events to be included in the API response. 
        in: query
      - minimum: 1
        type: integer
        name: page
        description: Indicates the page number of the results to be retrieved.
        in: query
      - type: string
        name: since
        description: Filters events to include only those that occurred on or after the specified timestamp.
        in: query
      - enum:
        - asc
        - desc
        type: string
        name: sort
        description: Specifies the sorting order for the returned events.
        in: query
      - type: string
        name: until
        description: Filters events to include only those that occurred on or before the specified timestamp. 
        in: query
      responses:
        '200':
          description: OK
          schema:
            "$ref": "#/definitions/internal.PaginatedResponse-events_Event"
  "/integrations":
    get:
      security:
      - ApiKeyAuth: []
      description: This endpoint is used to retrieve a list of all integrations associated with a organization. 
      produces:
      - application/json
      tags:
      - Integrations
      summary: Get All Integrations
      responses:
        '200':
          description: OK
          schema:
            type: array
            items:
              "$ref": "#/definitions/integrations.IntegrationsResponseItem"
        '400':
          description: Bad Request
          schema:
            "$ref": "#/definitions/internal.ErrorResponse"
        '500':
          description: Internal Server Error
          schema:
            "$ref": "#/definitions/internal.ErrorResponse500"
  "/integrations/_templates":
    get:
      security:
      - ApiKeyAuth: []
      description: This endpoint is used to retrieve a list of all available integration templates. Integration templates serve as pre-configured setups for common integrations.
      produces:
      - application/json
      tags:
      - Integrations
      summary: Get All Integration Templates
      responses:
        '200':
          description: OK
          schema:
            type: array
            items:
              "$ref": "#/definitions/integrations.IntegrationsResponseItem"
        '400':
          description: Bad Request
          schema:
            "$ref": "#/definitions/internal.ErrorResponse"
        '500':
          description: Internal Server Error
          schema:
            "$ref": "#/definitions/internal.ErrorResponse500"
  "/integrations/{name}":
    post:
      security:
      - ApiKeyAuth: []
      description: This endpoint is used to enable a specific integration identified by its unique `name`.
      consumes:
      - application/json
      produces:
      - application/json
      tags:
      - Integrations
      summary: Enable Integration
      parameters:
      - type: string
        description: The name of the integration to be enabled. 
        name: name
        in: path
        required: true
      responses:
        '200':
          description: OK
          schema:
            type: string
        '400':
          description: Bad Request
          schema:
            type: string
        '500':
          description: Internal Server Error
          schema:
            type: string
    delete:
      security:
      - ApiKeyAuth: []
      description: This endpoint is used to disable a specific integration identified by its unique `name`.
      produces:
      - application/json
      tags:
      - Integrations
      summary: Disable an Integration
      parameters:
      - type: string
        description: The name of the integration to be disabled.
        name: name
        in: path
        required: true
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
          schema:
            "$ref": "#/definitions/internal.ErrorResponse"
        '500':
          description: Internal Server Error
          schema:
            "$ref": "#/definitions/internal.ErrorResponse500"
  "/integrations/{name}/{orgID}":
    post:
      security:
      - ApiKeyAuth: []
      description: This endpoint is used to create a new webhook. It requires a payload containing details about the webhook.
      consumes:
      - application/json
      produces:
      - application/json
      tags:
      - Integrations
      summary: Create Webhook
      parameters:
      - type: string
        description: The name of the integration to bea associated to the new webhook.
        name: name
        in: path
        required: true
      - type: string
        description: The unique identifier of your organization in BoomFi.
        name: orgID
        in: path
        required: true
      responses:
        '200':
          description: OK
          schema:
            type: string
        '400':
          description: Bad Request
          schema:
            type: string
        '500':
          description: Internal Server Error
          schema:
            type: string
  "/paylinks":
    get:
      security:
      - ApiKeyAuth: []
      description: Retrieve a list of paylinks.
      consumes:
      - application/json
      produces:
      - application/json
      tags:
      - Paylinks
      summary: List Paylinks
      parameters:
      - type: string
        name: after
        in: query
        description: Return paylinks after this cursor for pagination.
      - type: string
        name: before
        in: query
        description: Return paylinks before this cursor for pagination.
      - maximum: 100
        minimum: 1
        type: integer
        name: limit
        in: query
        description: The maximum number of paylinks to return per page (1-100).
      - minimum: 1
        type: integer
        name: page
        in: query
        description: The page number of the results to return.
      - type: string
        name: since
        in: query
        description: Return paylinks created or updated since this timestamp.
      - enum:
        - asc
        - desc
        type: string
        name: sort
        in: query
        description: Sort order for the results.
      - type: string
        name: until
        in: query
        description: Return paylinks created or updated until this timestamp.
      responses:
        '200':
          description: OK
          schema:
            "$ref": "#/definitions/internal.PaginatedResponse-paylinks_PaymentLinkResponse"
        '400':
          description: Bad Request
          schema:
            "$ref": "#/definitions/internal.ErrorResponse"
        '500':
          description: Internal Server Error
          schema:
            "$ref": "#/definitions/internal.ErrorResponse500"
    post:
      security:
      - ApiKeyAuth: []
      description: Use this endpoint to generate a new payment link in BoomFi.
      consumes:
      - application/json
      produces:
      - application/json
      tags:
      - Paylinks
      summary: Create Payment Link
      parameters:
      - name: request
        in: body
        required: true
        schema:
          "$ref": "#/definitions/paylinks.CreatePaymentLinkRequest"
      responses:
        '200':
          description: OK
          schema:
            "$ref": "#/definitions/internal.Response-paylinks_PaymentLinkResponse"
        '400':
          description: Bad Request
          schema:
            "$ref": "#/definitions/internal.ErrorResponse"
        '500':
          description: Internal Server Error
          schema:
            "$ref": "#/definitions/internal.ErrorResponse500"
  "/paylinks/generate-variant/{paylinkId}":
    get:
      security:
      - ApiKeyAuth: []
      description: Use this endpoint to generate a variant URL of an existing payment link.
      consumes:
      - application/json
      produces:
      - application/json
      tags:
      - Paylinks
      summary: Generate Variant Pay Link URL
      parameters:
      - type: string
        description: Unique identifier of the payment link.
        name: paylinkId
        in: path
        required: true
      - type: string
        description: Amount to be associated with the payment link variant.
        name: amount
        in: query
      - type: string
        description: Currency to be associated with the payment link variant.
        name: currency
        in: query
      - type: string
        description: Customer identifier to record as `customer.reference`.
        name: customer_ident
        in: query
      - type: string
        description: URL to redirect customer after a successful payment.
        name: redirect_to
        in: query
      responses:
        '200':
          description: OK
          schema:
            "$ref": "#/definitions/paylinks.GenerateVariantURLResponse"
        '400':
          description: Bad Request
          schema:
            "$ref": "#/definitions/internal.ErrorResponse"
        '403':
          description: Forbidden
          schema:
            "$ref": "#/definitions/internal.ErrorResponse"
        '404':
          description: Not Found
          schema:
            "$ref": "#/definitions/internal.ErrorResponse"
        '500':
          description: Internal Server Error
          schema:
            "$ref": "#/definitions/internal.ErrorResponse500"
  "/payments":
    get:
      security:
      - ApiKeyAuth: []
      description: Retrieve a list of payments.
      consumes:
      - application/json
      produces:
      - application/json
      tags:
      - Payments
      summary: List Payments
      parameters:
      - name: after
        in: query
        description: Retrieve payments after this timestamp.
        type: string
      - name: before
        in: query
        description: Retrieve payments before this timestamp.
        type: string
      - name: limit
        in: query
        description: The maximum number of payments to retrieve (default=100, maximum=100).
        type: integer
        minimum: 1
        maximum: 100
      - name: page
        in: query
        description: The page number of results to retrieve.
        type: integer
        minimum: 1
      - name: since
        in: query
        description: Retrieve payments since this timestamp.
        type: string
      - name: sort
        in: query
        description: Sort order for payments (asc=ascending, desc=descending).
        type: string
        enum:
          - asc
          - desc
      - name: until
        in: query
        description: Retrieve payments until this timestamp.
        type: string
      responses:
        '200':
          description: OK
          schema:
            "$ref": "#/definitions/internal.PaginatedResponse-payments_PaymentResponse"
        '400':
          description: Bad Request
          schema:
            "$ref": "#/definitions/internal.ErrorResponse"
        '500':
          description: Internal Server Error
          schema:
            "$ref": "#/definitions/internal.ErrorResponse500"
  "/payments/{paymentId}":
    get:
      security:
      - ApiKeyAuth: []
      description: Retrieve a payment's details by it's unique identifier.
      produces:
      - application/json
      tags:
      - Payments
      summary: Get Payment by ID
      parameters:
      - type: string
        description: Unique identifier of a payment in the system.
        name: paymentId
        in: path
        required: true
      responses:
        '200':
          description: OK
          schema:
            "$ref": "#/definitions/internal.Response-payments_PaymentResponse"
        '400':
          description: Bad Request
          schema:
            "$ref": "#/definitions/internal.ErrorResponse"
        '404':
          description: Not Found
          schema:
            "$ref": "#/definitions/internal.ErrorResponse"
        '500':
          description: Internal Server Error
          schema:
            "$ref": "#/definitions/internal.ErrorResponse500"
  "/plan":
    get:
      security:
      - ApiKeyAuth: []
      description: Retrieves a list of plans available in the system.
      consumes:
      - application/json
      produces:
      - application/json
      tags:
      - Plans
      summary: List Plans
      parameters:
      - type: string
        name: after
        description: Filters plans to include only those created after the specified timestamp. 
        in: query
      - type: string
        name: before
        description: Filters plans to include only those created before the specified timestamp. 
        in: query
      - maximum: 100
        minimum: 1
        type: integer
        name: limit
        description: Specifies the maximum number of plans to be included in the API response. 
        in: query
      - minimum: 1
        type: integer
        name: page
        description: Indicates the page number of the results to be retrieved.
        in: query
      - type: string
        name: since
        description: Filters plans to include only those created on or after the specified timestamp. 
        in: query
      - enum:
        - asc
        - desc
        type: string
        name: sort
        description: Specifies the sorting order for the returned plans.
        in: query
      - type: string
        name: until
        description: Filters plans to include only those created on or before the specified timestamp. 
        in: query
      responses:
        '200':
          description: OK
          schema:
            "$ref": "#/definitions/internal.PaginatedResponse-plan_PlanResponse"
        '400':
          description: Bad Request
          schema:
            "$ref": "#/definitions/internal.ErrorResponse"
        '500':
          description: Internal Server Error
          schema:
            "$ref": "#/definitions/internal.ErrorResponse500"
    post:
      security:
      - ApiKeyAuth: []
      description: This endpoint is used to create a new plan. It requires a payload containing the details of the plan.
      consumes:
      - application/json
      produces:
      - application/json
      tags:
      - Plans
      summary: Create Plan
      parameters:
      - name: request
        in: body
        required: true
        schema:
          "$ref": "#/definitions/plan.CreatePlanRequest"
      responses:
        '200':
          description: OK
          schema:
            "$ref": "#/definitions/internal.Response-plan_PlanResponse"
        '400':
          description: Bad Request
          schema:
            "$ref": "#/definitions/internal.ErrorResponse"
        '500':
          description: Internal Server Error
          schema:
            "$ref": "#/definitions/internal.ErrorResponse500"
  "/plan/{planId}":
    get:
      security:
      - ApiKeyAuth: []
      description: This endpoint retrieves details about a specific plan identified by the plan's unique identifier.
      produces:
      - application/json
      tags:
      - Plans
      summary: Get Plan by ID
      parameters:
      - type: string
        description: The unique identifier of the plan.
        name: planId
        in: path
        required: true
      responses:
        '200':
          description: OK
          schema:
            "$ref": "#/definitions/internal.Response-plan_PlanResponse"
        '400':
          description: Bad Request
          schema:
            "$ref": "#/definitions/internal.ErrorResponse"
        '500':
          description: Internal Server Error
          schema:
            "$ref": "#/definitions/internal.ErrorResponse"
  "/subscriptions":
    get:
      security:
      - ApiKeyAuth: []
      description: List subscriptions
      consumes:
      - application/json
      produces:
      - application/json
      tags:
      - Subscriptions
      summary: List subscriptions.
      parameters:
      - type: string
        name: after
        in: query
      - type: string
        name: before
        in: query
      - maximum: 100
        minimum: 1
        type: integer
        name: limit
        in: query
      - minimum: 1
        type: integer
        name: page
        in: query
      - type: string
        name: since
        in: query
      - enum:
        - asc
        - desc
        type: string
        name: sort
        in: query
      - type: string
        name: until
        in: query
      responses:
        '200':
          description: OK
          schema:
            "$ref": "#/definitions/internal.PaginatedResponse-subscriptions_SubscriptionResponse"
        '400':
          description: Bad Request
          schema:
            "$ref": "#/definitions/internal.ErrorResponse"
        '500':
          description: Internal Server Error
          schema:
            "$ref": "#/definitions/internal.ErrorResponse"
  "/subscriptions/{subscriptionID}":
    delete:
      security:
      - ApiKeyAuth: []
      description: Cancel subscription
      produces:
      - application/json
      tags:
      - Subscriptions
      summary: Cancel subscription
      parameters:
      - type: string
        description: Subscription ID
        name: subscriptionID
        in: path
        required: true
      responses:
        '200':
          description: OK
          schema:
            "$ref": "#/definitions/internal.Response-subscriptions_SubscriptionResponse"
        '400':
          description: Bad Request
          schema:
            "$ref": "#/definitions/internal.ErrorResponse"
        '404':
          description: Not Found
          schema:
            "$ref": "#/definitions/internal.ErrorResponse"
        '500':
          description: Internal Server Error
          schema:
            "$ref": "#/definitions/internal.ErrorResponse"
definitions:
  accounts.ChainResponse:
    type: object
    properties:
      category:
        type: string
        description: The category or classification of the chain.
      code:
        type: string
        description: The code or abbreviation associated with the chain.
      is_testnet:
        type: boolean
        description: Indicates whether the chain is a testnet (true) or not (false).
      name:
        type: string
        description: The name or title associated with the chain.
      native_currency_symbol:
        type: string
        description: The symbol representing the native currency of the chain.
  accounts.OrgSettlementAccountResponse:
    type: object
    properties:
      account_number:
        description: The account number.
        type: string
        example: "123456789"
      account_type:
        description: The type of the account.
        allOf:
          - "$ref": "#/definitions/models.AccountType"
      address:
        description: The cryptocurrency wallet address associated with a specific account.
        type: string
        example: "0x4bbeEB066eD09B7AEd07bF39EEe0460DFa261520"
      chain:
        "$ref": "#/definitions/accounts.ChainResponse"
      chain_id:
        description: The unique identifier representing a blockchain network or chain.
        type: integer
        example: 1
      created_at:
        description: The timestamp indicating when the entity was created.
        type: string
        example: '2023-01-01T12:00:00Z'
      created_by:
        description: Information about the user or entity that created the entry.
        type: string
        example: "user123"
      currencies:
        description: An array containing the names or symbols of the currencies supported.
        type: array
        items:
          type: string
        example: ["BTC", "ETH", "USD"]
      deleted_at:
        description: The timestamp indicating when the account was deleted.
        type: string
        example: '2023-01-02T08:30:00Z'
      enabled:
        description: Indicates whether the account is currently enabled.
        type: boolean
        example: true
      id:
        description: The unique identifier for the account.
        type: integer
        example: 123456
      name:
        description: The name or title associated with the account.
        type: string
        example: "Primary Account"
      org_id:
        description: The identifier representing the organization associated with the account.
        type: string
        example: "org123"
      properties:
        type: object
        additionalProperties: {}
      provider:
        description: The account provider associated with the account.
        "$ref": "#/definitions/models.AccountProvider"
      sort_code:
        description: The sort code associated with the account.
        type: string
        example: "123456"
      updated_at:
        description: The timestamp indicating when the entity was last updated.
        type: string
        example: '2023-01-03T10:45:00Z'

  customers.CreateCustomerRequest:
    type: object
    properties:
      customer_ident:
        type: string
        description: Unique identifier for a customer.
      discord:
        type: string
        description: Discord username or identifier associated with a customer, allowing for communication and linkage to Discord-based interactions.
      email:
        type: string
        description: Customer's email address.
      name:
        type: string
        description: Customer's name.
      number:
        type: string
        description: Numeric identifier or contact number associated with the customer.
      twitter:
        type: string
        description: Twitter handle associated with the customer.
      wallet_address:
        type: string
        description: Unique address associated with a customer's wallet.
  customers.CustomerResponse:
    type: object
    properties:
      created_at:
        description: The timestamp indicating when the customer was created.
        type: string
        example: '2023-01-01T12:00:00Z'
      deleted_at:
        description: The timestamp indicating when the customer was deleted, if applicable.
        type: string
        example: '2023-01-05T10:00:00Z'
      email:
        description: The email address of the customer.
        type: string
        example: customer@example.com
      id:
        description: The unique identifier of the customer.
        type: string
        example: customer123
      metadata:
        type: object
        additionalProperties: {}
      name:
        description: The name of the customer.
        type: string
        example: John Doe
      org_id:
        description: The identifier representing the organization associated with the customer.
        type: string
        example: org123
      phone:
        description: The phone number of the customer.
        type: string
        example: +1234567890
      properties:
        description: Additional properties associated with the customer.
        type: object
        additionalProperties: {}
      reference:
        description: The reference associated with the customer.
        type: string
        example: REF-123456
      updated_at:
        description: The timestamp indicating when the customer was last updated.
        type: string
        example: '2023-01-02T09:00:00Z'
      v1: {}
      wallet_address:
        description: The wallet address associated with the customer.
        type: string
        example: 0x0123456789abcdef0123456789abcdef0123456
  customers.ResponseCustomer:
    type: object
    properties:
      created_at:
        type: string
        description: The timestamp indicating when the customer record was created.
        example: '2023-03-15T08:30:00Z'
      customer_ident:
        type: string
        description: The unique identifier for the customer.
        example: "CUST123"
      email:
        type: string
        description: The email address associated with the customer.
        example: example@email.com
      guest:
        type: boolean
        description: Indicates whether the customer is a guest (true) or not (false).
        example: false
      id:
        type: string
        description: The unique identifier for the customer.
        example: "123456789"
      is_deleted:
        type: boolean
        description: Indicates whether the customer has been deleted (true) or not (false).
        example: false
      last_payment_date:
        type: string
        description: The timestamp indicating the date of the last payment made by the customer.
        example: '2023-03-20T12:00:00Z'
      metadata:
        type: object
        description: Additional metadata associated with the customer.
        additionalProperties: {}
      name:
        type: string
        description: The name of the customer.
        example: John Doe
      organisation_id:
        type: string
        description: The identifier of the organization to which the customer belongs.
        example: "ORG123"
      payments_count:
        type: integer
        description: The total count of payments made by the customer.
        example: 5
      phone:
        type: string
        description: The phone number associated with the customer.
        example: +1234567890
      properties:
        type: object
        description: Additional custom properties associated with the customer.
        additionalProperties: {}
      updated_at:
        type: string
        description: The timestamp indicating when the customer record was last updated.
        example: '2023-03-25T10:45:00Z'
      wallet_address:
        type: string
        description: The wallet address associated with the customer for cryptocurrency transactions.
        example: "0x4bbeEB066eD09B7AEd07bF39EEe0460DFa261520"
  events.Event:
    type: object
    properties:
      action:
        type: string
        description: The action associated with the event.
        example: "create"
      data:
        type: object
        additionalProperties: {}
        description: Additional data associated with the event.
      id:
        type: string
        description: The unique identifier of the event.
        example: "event123"
      timestamp:
        type: string
        description: The timestamp indicating when the event occurred.
        example: "2023-01-01T12:00:00Z"
      type:
        type: string
        description: The type or category of the event.
        example: "user_activity"
  integrations.IntegrationsResponseItem:
    type: object
    properties:
      created_at:
        type: string
        description: The timestamp indicating when the integration was created.
        example: '2023-01-01T12:00:00Z'
      created_by:
        type: string
        description: The user or entity that created the integration.
        example: "user123"
      description:
        type: string
        description: The description of the integration.
        example: "Integration for data synchronization"
      enabled:
        type: boolean
        description: Indicates whether the integration is enabled.
        example: true
      id:
        type: integer
        description: The unique identifier of the integration.
        example: 123456
      last_error:
        type: string
        description: The last error message encountered during synchronization.
        example: "Connection timeout"
      last_sync_time:
        type: string
        description: The timestamp indicating when the last synchronization occurred.
        example: '2023-01-02T08:30:00Z'
      name:
        type: string
        description: The name of the integration.
        example: "Data Sync"
      org_id:
        type: string
        description: The identifier of the organization associated with the integration.
        example: "org123"
      properties:
        type: object
        additionalProperties: {}
        description: Additional properties associated with the integration.
      schema:
        type: object
        additionalProperties: {}
        description: The schema of the integration.
      status:
        "$ref": "#/definitions/models.OrgIntegrationStatus"
        description: The status of the integration.
      template_name:
        type: string
        description: The template name of the integration.
        example: "Data Sync Template"
      type:
        allOf:
          - "$ref": "#/definitions/models.OrgIntegrationType"
        description: The type of the integration.
      updated_at:
        type: string
        description: The timestamp indicating when the integration was last updated.
        example: '2023-01-03T10:45:00Z'

  internal.ErrorResponse:
    type: object
    properties:
      error:
        "$ref": "#/definitions/internal.ErrorStruct"
  internal.ErrorResponse500:
    type: object
    properties:
      error:
        "$ref": "#/definitions/internal.ErrorStruct500"
  internal.ErrorStruct:
    type: object
    properties:
      code:
        description: |-
          The error code returned by the server.
          Example: 400
        type: integer
        example: 400
      errors:
        description: A list of detailed error objects.
        type: array
        items:
          "$ref": "#/definitions/internal.SingleError"
      message:
        description: |-
          A descriptive message explaining the error.
          Example: Insufficient quantity
        type: string
        example: Insufficient quantity
  internal.ErrorStruct500:
    type: object
    properties:
      code:
        description: |-
          The error code returned by the server.
          Example: 500
        type: integer
        example: 500
      errors:
        description: A list of detailed error objects.
        type: array
        items:
          "$ref": "#/definitions/internal.SingleError500"
      message:
        description: |-
          A descriptive message explaining the error.
          Example: Internal server error
        type: string
        example: Internal server error
  internal.PaginatedItems-accounts_OrgSettlementAccountResponse:
    type: object
    properties:
      items:
        type: array
        items:
          "$ref": "#/definitions/accounts.OrgSettlementAccountResponse"
      last_update:
        type: string
        description: The timestamp indicating when the pagination data was last updated.
        example: '2021-01-01T00:00:00Z'
      next:
        type: integer
        description: The index indicating the next page of items.
        example: 10
      total:
        type: integer
        description: The total number of items across all pages.
        example: 10
  internal.PaginatedItems-customers_ResponseCustomer:
    type: object
    properties:
      items:
        type: array
        items:
          "$ref": "#/definitions/customers.ResponseCustomer"
      last_update:
        type: string
        description: The timestamp indicating when the data was last updated.
        example: '2021-01-01T00:00:00Z'
      next:
        type: integer
        description: The index indicating the next page of items.
        example: 10
      total:
        type: integer
        description: The total number of items across all pages.
        example: 10
  internal.PaginatedItems-events_Event:
    type: object
    properties:
      items:
        type: array
        items:
          "$ref": "#/definitions/events.Event"
      last_update:
        type: string
        description: The timestamp indicating when the data was last updated.
        example: '2021-01-01T00:00:00Z'
      next:
        type: integer
        description: The index indicating the next page of items.
        example: 10
      total:
        type: integer
        description: The total number of items across all pages.
        example: 10
  internal.PaginatedItems-paylinks_PaymentLinkResponse:
    type: object
    properties:
      items:
        type: array
        items:
          "$ref": "#/definitions/paylinks.PaymentLinkResponse"
      last_update:
        type: string
        description: The timestamp indicating when the data was last updated.
        example: '2021-01-01T00:00:00Z'
      next:
        type: integer
        description: The index of the next page of paylinks. 
        example: 10
      total:
        type: integer
        description: The total number of paylinks available.
        example: 10
  internal.PaginatedItems-payments_PaymentResponse:
    type: object
    properties:
      items:
        type: array
        items:
          "$ref": "#/definitions/payments.PaymentResponse"
      last_update:
        type: string
        description: The timestamp indicating the last update time.
        example: '2021-01-01T00:00:00Z'
      next:
        type: integer
        description: The number of the next page of results.
        example: 10
      total:
        type: integer
        description: The total number of items in the response.
        example: 10
  internal.PaginatedItems-plan_PlanResponse:
    type: object
    properties:
      items:
        type: array
        items:
          "$ref": "#/definitions/plan.PlanResponse"
      last_update:
        type: string
        example: '2021-01-01T00:00:00Z'
      next:
        type: integer
        example: 10
      total:
        type: integer
        example: 10
  internal.PaginatedItems-subscriptions_SubscriptionResponse:
    type: object
    properties:
      items:
        type: array
        items:
          "$ref": "#/definitions/subscriptions.SubscriptionResponse"
      last_update:
        type: string
        example: '2021-01-01T00:00:00Z'
      next:
        type: integer
        example: 10
      total:
        type: integer
        example: 10
  internal.PaginatedResponse-accounts_OrgSettlementAccountResponse:
    type: object
    properties:
      data:
        "$ref": "#/definitions/internal.PaginatedItems-accounts_OrgSettlementAccountResponse"
      error:
        type: boolean
  internal.PaginatedResponse-customers_ResponseCustomer:
    type: object
    properties:
      data:
        "$ref": "#/definitions/internal.PaginatedItems-customers_ResponseCustomer"
      error:
        type: boolean
  internal.PaginatedResponse-events_Event:
    type: object
    properties:
      data:
        "$ref": "#/definitions/internal.PaginatedItems-events_Event"
      error:
        type: boolean
  internal.PaginatedResponse-paylinks_PaymentLinkResponse:
    type: object
    properties:
      data:
        "$ref": "#/definitions/internal.PaginatedItems-paylinks_PaymentLinkResponse"
      error:
        type: boolean
  internal.PaginatedResponse-payments_PaymentResponse:
    type: object
    properties:
      data:
        "$ref": "#/definitions/internal.PaginatedItems-payments_PaymentResponse"
      error:
        type: boolean
  internal.PaginatedResponse-plan_PlanResponse:
    type: object
    properties:
      data:
        "$ref": "#/definitions/internal.PaginatedItems-plan_PlanResponse"
      error:
        type: boolean
  internal.PaginatedResponse-subscriptions_SubscriptionResponse:
    type: object
    properties:
      data:
        "$ref": "#/definitions/internal.PaginatedItems-subscriptions_SubscriptionResponse"
      error:
        type: boolean
  internal.Response-customers_ResponseCustomer:
    type: object
    properties:
      data:
        "$ref": "#/definitions/customers.ResponseCustomer"
      error:
        type: boolean
  internal.Response-paylinks_PaymentLinkResponse:
    type: object
    properties:
      data:
        "$ref": "#/definitions/paylinks.PaymentLinkResponse"
      error:
        type: boolean
  internal.Response-payments_PaymentResponse:
    type: object
    properties:
      data:
        "$ref": "#/definitions/payments.PaymentResponse"
      error:
        type: boolean
  internal.Response-plan_PlanResponse:
    type: object
    properties:
      data:
        "$ref": "#/definitions/plan.PlanResponse"
      error:
        type: boolean
  internal.Response-subscriptions_SubscriptionResponse:
    type: object
    properties:
      data:
        "$ref": "#/definitions/subscriptions.SubscriptionResponse"
      error:
        type: boolean
  internal.SingleError:
    type: object
    properties:
      domain:
        description: |-
          The domain associated with the error.
          Example: orders
        type: string
        example: orders
      reason:
        description: |-
          The reason for the error.
          Example: InsufficientQuantity
        type: string
        example: InsufficientQuantity
  internal.SingleError500:
    type: object
    properties:
      domain:
        description: |-
          The domain associated with the error.
          Example: orders
        type: string
        example: orders
      reason:
        description: |-
          The reason for the error.
          Example: Internal
        type: string
        example: Internal
  models.AccountProvider:
    description: The account provider.
    type: integer
    enum:
    - 1
    x-enum-varnames:
    - AccountProviderSpreedly
  models.AccountType:
    type: integer
    enum:
    - 1
    - 2
    - 3
    x-enum-varnames:
    - AccountTypeCrypto
    - AccountTypeBank
    - AccountTypeCard
  models.BillingScheme:
    type: integer
    enum:
    - 1
    - 2
    - 3
    - 4
    x-enum-varnames:
    - BillingSchemeFlatfee
    - BillingSchemePerunit
    - BillingSchemeGraduated
    - BillingSchemeVolume
  models.BillingSource:
    type: integer
    enum:
    - 1
    - 2
    - 3
    - 4
    x-enum-varnames:
    - BillingSourceLago
    - BillingSourceBoomfi
    - BillingSourceStripe
    - BillingSourceChargebee
  models.CryptoTransaction:
    type: object
    properties:
      chain_id:
        description: The unique identifier representing a blockchain network or chain.
        type: integer
        example: 1
      created_at:
        description: The timestamp indicating when the crypto transaction was created.
        type: string
        example: '2023-01-01T12:00:00Z'
      id:
        description: The unique identifier of the crypto transaction.
        type: integer
      payment_id:
        description: The ID of the payment associated with the crypto transaction.
        allOf:
        - "$ref": "#/definitions/sql.NullString"
      raw:
        description: Additional raw data associated with the crypto transaction.
        type: array
        items:
          type: integer
      sequence:
        description: The sequence number of the crypto transaction.
        type: string
        example: "123456789"
      source:
        description: Details of the source of the crypto transaction.
        allOf:
        - "$ref": "#/definitions/models.PaymentMethod"
      status:
        description: The status of the crypto transaction.
        allOf:
        - "$ref": "#/definitions/models.TransactionStatus"
      transaction_hash:
        description: The transaction hash of the crypto transaction.
        type: string
        example: "0x0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef"
      type:
        description: The type of the crypto transaction.
        allOf:
        - "$ref": "#/definitions/models.TransactionType"
      updated_at:
        description: The timestamp indicating when the crypto transaction was last updated.
        type: string
        example: '2023-01-01T12:30:00Z'
  models.NullAccountProvider:
    type: object
    properties:
      accountProvider:
        "$ref": "#/definitions/models.AccountProvider"
      valid:
        description: Valid is true if [AccountProvider] is not null.
        type: boolean
  models.Org:
    type: object
    properties:
      created_at:
        description: The timestamp indicating when the organization was created.
        type: string
        example: '2023-01-01T12:00:00Z'
      credits_usd:
        description: The amount of credits in USD associated with the organization.
        type: number
        example: 5000.50
      id:
        description: The unique identifier of the organization.
        type: string
        example: "org123"
      logo_url:
        description: The URL of the organization's logo.
        type: string
        example: "https://example.com/logo.png"
      name:
        description: The name of the organization.
        type: string
        example: "Example Organization"
      offramp_fee_pct:
        description: The off-ramp fee percentage applied by the organization.
        type: number
        example: 0.05
      owner_user_id:
        description: The user ID of the owner of the organization.
        type: string
        example: "user123"
      payment_fee_pct:
        description: The payment fee percentage applied by the organization.
        type: number
        example: 0.03
      properties:
        description: Additional properties associated with the organization.
        type: array
        items:
          type: integer
      swap_fee_pct:
        description: The swap fee percentage applied by the organization.
        type: number
        example: 0.02
      updated_at:
        description: The timestamp indicating when the organization was last updated.
        type: string
        example: '2023-01-02T08:30:00Z'
      v1:
        description: Additional data associated with the organization.
        type: array
        items:
          type: integer
      webhook_url:
        description: The URL used for webhooks related to the organization.
        type: string
        example: "https://example.com/webhook"

  models.OrgIntegrationStatus:
    type: integer
    enum:
    - 1
    - 2
    - 3
    - 4
    - 5
    x-enum-varnames:
    - OrgIntegrationStatusUnknown
    - OrgIntegrationStatusUpdating
    - OrgIntegrationStatusReady
    - OrgIntegrationStatusDisabling
    - OrgIntegrationStatusDisabled
  models.OrgIntegrationType:
    type: integer
    enum:
    - 1
    - 2
    - 3
    - 4
    - 5
    x-enum-varnames:
    - OrgIntegrationTypeUnknown
    - OrgIntegrationTypeBilling
    - OrgIntegrationTypeEcommerce
    - OrgIntegrationTypeAccounting
    - OrgIntegrationTypeWorkflow
  models.PaymentMethod:
    type: integer
    enum:
    - 1
    - 2
    - 3
    - 4
    - 5
    - 6
    - 7
    - 8
    - 9
    - 10
    - 11
    x-enum-varnames:
    - PaymentMethodUnknown
    - PaymentMethodMerchantcontract
    - PaymentMethodProxywallet
    - PaymentMethodUnblock
    - PaymentMethodCard
    - PaymentMethodGooglepay
    - PaymentMethodApplepay
    - PaymentMethodPaypal
    - PaymentMethodDirectdebit
    - PaymentMethodRamp
    - PaymentMethodRampcryptosettlement
  models.PaymentStatus:
    type: integer
    enum:
    - 1
    - 2
    - 3
    - 4
    - 5
    - 6
    - 7
    - 8
    x-enum-varnames:
    - PaymentStatusUnknown
    - PaymentStatusRequirespaymentmethod
    - PaymentStatusRequiresconfirmation
    - PaymentStatusRequiresaction
    - PaymentStatusProcessing
    - PaymentStatusSucceeded
    - PaymentStatusCanceled
    - PaymentStatusFailed
  models.PlanType:
    type: integer
    enum:
    - 1
    - 2
    - 3
    x-enum-varnames:
    - PlanTypeUnknown
    - PlanTypeOnetime
    - PlanTypeRecurring
  models.RecurringInterval:
    type: integer
    description: >-
          The recurring interval for the payment link.

          - 1 = RecurringIntervalUnknown

          - 2 = RecurringIntervalMinute
          
          - 3 = RecurringIntervalHour
          
          - 4 = RecurringIntervalDay
          
          - 5 = RecurringIntervalWeek
          
          - 6 = RecurringIntervalMonth
          
          - 7 = RecurringIntervalYear
          
    enum:
    - 1
    - 2
    - 3
    - 4
    - 5
    - 6
    - 7
    x-enum-varnames:
    - RecurringIntervalUnknown
    - RecurringIntervalMinute
    - RecurringIntervalHour
    - RecurringIntervalDay
    - RecurringIntervalWeek
    - RecurringIntervalMonth
    - RecurringIntervalYear
  models.RecurringUsageType:
    type: integer
    enum:
    - 1
    - 2
    - 3
    x-enum-varnames:
    - RecurringUsageTypeUnknown
    - RecurringUsageTypeLicensed
    - RecurringUsageTypeMetered
  models.SubscriptionStatus:
    type: integer
    enum:
    - 1
    - 2
    - 3
    - 4
    - 5
    - 6
    - 7
    - 8
    x-enum-varnames:
    - SubscriptionStatusUnknown
    - SubscriptionStatusPending
    - SubscriptionStatusFuture
    - SubscriptionStatusIntrial
    - SubscriptionStatusActive
    - SubscriptionStatusPaused
    - SubscriptionStatusExpired
    - SubscriptionStatusCanceled
  models.TransactionStatus:
    type: integer
    enum:
    - 1
    - 2
    - 3
    x-enum-varnames:
    - TransactionStatusPending
    - TransactionStatusSuccess
    - TransactionStatusFailed
  models.TransactionType:
    type: integer
    enum:
    - 1
    - 2
    - 3
    - 4
    - 5
    - 6
    - 7
    - 8
    - 9
    - 10
    x-enum-varnames:
    - TransactionTypeUnknown
    - TransactionTypeApproval
    - TransactionTypeDeposit
    - TransactionTypeWithdraw
    - TransactionTypePayment
    - TransactionTypeRefund
    - TransactionTypeSubscribe
    - TransactionTypeUnsubscribe
    - TransactionTypeInternal
    - TransactionTypeSwap
  orgs.UpdateOrgRequest:
    type: object
    required:
      - logo_url
      - name
      - webhook_url
    properties:
      logo_url:
        type: string
        description: The URL of the organization's logo.
      name:
        type: string
        description: The updated name of the organization.
      webhook_url:
        type: string
        description: The updated webhook URL for the organization.

  paylinks.CreatePaymentLinkRequest:
    type: object
    properties:
      amount:
        type: string
        description: The amount associated with the payment link.
      currency:
        type: string
        description: The currency of the payment link.
      description:
        type: string
        description: A description of the payment link.
      interval:
        "$ref": "#/definitions/models.RecurringInterval"
        description: >-
          The recurring interval for the payment link.
          | Enum Value | Enum Name                |
          |------------|--------------------------|
          | 1          | RecurringIntervalUnknown |
          | 2          | RecurringIntervalMinute  |
          | 3          | RecurringIntervalHour    |
          | 4          | RecurringIntervalDay     |
          | 5          | RecurringIntervalWeek    |
          | 6          | RecurringIntervalMonth   |
          | 7          | RecurringIntervalYear    |
      intervalCount:
        type: integer
        description: The number of intervals for the recurring payment link.
      metadata:
        type: object
        additionalProperties: true
        description: Additional metadata associated with the payment link.
      name:
        type: string
        description: The name of the payment link.
      reference:
        type: string
        description: The reference for the payment link.
      trial_period:
        type: string
        description: The trial period for the payment link.
      type:
        type: string
        description: The type of the payment link.
  paylinks.GenerateVariantURLResponse:
    type: object
    properties:
      url:
        type: string
        description: The generated variant URL.
        example: "https://pay-test.boomfi.xyz/2bm4YuFSaw011jTWbevVPA3137q?amount=20&currency=EUR"
      created_by:
        type: string
        description: The user who created the variant URL.
        example: "user123"
      payment_link:
        "$ref": "#/definitions/paylinks.PaymentLinkResponse"
      plan:
        "$ref": "#/definitions/plan.PlanResponse"
  paylinks.PaymentLinkResponse:
    type: object
    properties:
      created_at:
        description: The timestamp indicating when the payment link was created.
        type: string
        example: '2023-01-01T12:00:00Z'
      created_by:
        description: The identifier of the user who created the payment link.
        type: string
        example: "user123"
      customer_ident_collection:
        description: Indicates whether customer identification collection is enabled for the payment link.
        type: boolean
        example: true
      deleted_at:
        description: The timestamp indicating when the payment link was deleted (if applicable).
        type: string
        example: '2023-01-02T08:30:00Z'
      enabled:
        description: Indicates whether the payment link is enabled.
        type: boolean
        example: true
      id:
        description: The unique identifier of the payment link.
        type: string
        example: "link123"
      invoice_id:
        description: The identifier of the associated invoice (if applicable).
        type: string
        example: "invoice123"
      metadata:
        description: Additional metadata associated with the payment link.
        type: object
        additionalProperties: true
        example: {"key": "value"}
      plan:
        description: The details of the associated plan (if applicable).
        "$ref": "#/definitions/plan.PlanResponse"
      plan_id:
        description: The identifier of the associated plan (if applicable).
        type: string
        example: "plan123"
      properties:
        description: Additional properties associated with the payment link.
        type: object
        additionalProperties: true
        example: {"key": "value"}
      shipping_address_collection:
        description: Indicates whether shipping address collection is enabled for the payment link.
        type: boolean
        example: true
      source:
        description: The billing source used for the payment link.
        allOf:
          - "$ref": "#/definitions/models.BillingSource"
      tax_ident_collection:
        description: Indicates whether tax identification collection is enabled for the payment link.
        type: boolean
        example: true
      updated_at:
        description: The timestamp indicating when the payment link was last updated.
        type: string
        example: '2023-01-03T10:45:00Z'
      updated_by:
        description: The identifier of the user who last updated the payment link.
        type: string
        example: "user456"
  payments.PaymentResponse:
    type: object
    properties:
      amount:
        description: The amount associated with the payment.
        type: string
        example: "100.00"
      created_at:
        description: The timestamp indicating when the payment was created.
        type: string
        example: "2023-01-01T12:00:00Z"
      crypto_transaction:
        "$ref": "#/definitions/models.CryptoTransaction"
      currency:
        description: The currency of the payment.
        type: string
        example: "USD"
      customer:
        "$ref": "#/definitions/customers.CustomerResponse"
      customer_id:
        description: The ID of the customer associated with the payment.
        type: string
        example: "customer123"
      id:
        description: The unique identifier of the payment.
        type: string
        example: "payment123"
      invoice_id:
        description: The ID of the invoice associated with the payment.
        type: string
        example: "invoice123"
      next_action:
        description: The next action related to the payment.
        type: string
        example: "verify_payment"
      org_id:
        description: The ID of the organization associated with the payment.
        type: string
        example: "org123"
      parent_id:
        description: The ID of the parent payment if this payment is a part of a larger transaction.
        type: string
        example: "parent_payment123"
      payment_link:
        "$ref": "#/definitions/paylinks.PaymentLinkResponse"
      payment_method:
        description: Details of the payment method used for the payment.
        allOf:
        - "$ref": "#/definitions/models.PaymentMethod"
      properties:
        description: Additional properties associated with the payment.
        type: object
        additionalProperties: {}
      scheduled_time:
        description: The scheduled time for the payment.
        type: integer
        example: 1643712000
      source:
        description: Details of the billing source associated with the payment.
        allOf:
        - "$ref": "#/definitions/models.BillingSource"
      status:
        description: The status of the payment.
        allOf:
        - "$ref": "#/definitions/models.PaymentStatus"
      updated_at:
        description: The timestamp indicating when the payment was last updated.
        type: string
      v1:
        description: v1
        type: array
        items:
          type: integer
  plan.CreatePlanRequest:
    type: object
    properties:
      amount:
        type: string
        description: The amount associated with the plan, specified as a string. This parameter represents the cost or price of the plan.
      currency:
        type: string
        description: The currency in which the plan amount is expressed. 
      description:
        type: string
        description:  A brief description or summary of the plan. This parameter provides additional information about the purpose or features of the plan.
      interval:
        "$ref": "#/definitions/models.RecurringInterval"
      intervalCount:
        type: integer
        description: The number of intervals between each billing cycle. This parameter determines how often the plan is billed within the specified interval.
      metadata:
        type: object
        description: An object containing additional metadata associated with the plan. 
        additionalProperties: {}
      name:
        type: string
        description: A name or label associated with the plan. This parameter represents a identifier or title for the plan.
      reference:
        type: string
        description: A reference identifier associated with the plan. This parameter allows for linking the plan to external identifiers.
      trial_period:
        type: string
        description: Specifies the trial period duration for the plan, if applicable. This parameter represents the duration of any trial period associated with the plan.
  plan.PaymentLinkResponse:
    type: object
    properties:
      created_at:
        description: created_at
        type: string
      created_by:
        description: created_by
        type: string
      customer_ident_collection:
        description: customer_ident_collection
        type: boolean
      deleted_at:
        description: deleted_at
        type: string
      enabled:
        description: enabled
        type: boolean
      id:
        description: id
        type: string
      invoice_id:
        description: invoice_id
        type: string
      metadata:
        type: object
        additionalProperties: {}
      plan_id:
        description: plan_id
        type: string
      properties:
        type: object
        additionalProperties: {}
      shipping_address_collection:
        description: shipping_address_collection
        type: boolean
      source:
        description: source
        allOf:
        - "$ref": "#/definitions/models.BillingSource"
      tax_ident_collection:
        description: tax_ident_collection
        type: boolean
      updated_at:
        description: updated_at
        type: string
      updated_by:
        description: updated_by
        type: string
  plan.PlanResponse:
    type: object
    properties:
      available_quantity:
        description: The available quantity of the plan.
        type: integer
        example: 100
      billing_scheme:
        description: The billing scheme of the plan.
        allOf:
          - "$ref": "#/definitions/models.BillingScheme"
      created_at:
        description: The timestamp indicating when the plan was created.
        type: string
        example: '2023-01-01T12:00:00Z'
      created_by:
        description: The identifier of the user who created the plan.
        type: string
        example: "user123"
      currency:
        description: The currency of the plan.
        type: string
        example: "USD"
      deleted_at:
        description: The timestamp indicating when the plan was deleted (if applicable).
        type: string
        example: '2023-01-02T08:30:00Z'
      enabled:
        description: Indicates whether the plan is enabled.
        type: boolean
        example: true
      id:
        description: The unique identifier of the plan.
        type: string
        example: "plan123"
      metadata:
        description: Additional metadata associated with the plan.
        type: object
        additionalProperties: true
        example: {"key": "value"}
      name:
        description: The name of the plan.
        type: string
        example: "Gold Plan"
      org_id:
        description: The identifier of the organization associated with the plan.
        type: string
        example: "org123"
      payment_link:
        description: The details of the associated payment link.
        "$ref": "#/definitions/plan.PaymentLinkResponse"
      price:
        description: The price of the plan.
        type: string
        example: "$99.99"
      properties:
        description: Additional properties associated with the plan.
        type: object
        additionalProperties: true
        example: {"key": "value"}
      recurring_interval:
        description: The recurring interval of the plan.
        allOf:
          - "$ref": "#/definitions/models.RecurringInterval"
      recurring_interval_count:
        description: The recurring interval count of the plan.
        type: integer
        example: 1
      recurring_usage_type:
        description: The recurring usage type of the plan.
        allOf:
          - "$ref": "#/definitions/models.RecurringUsageType"
      reference:
        description: The reference of the plan.
        type: string
        example: "plan-ref-123"
      source:
        description: The billing source used for the plan.
        allOf:
          - "$ref": "#/definitions/models.BillingSource"
      trial_period:
        description: The trial period of the plan.
        type: string
        example: "14 days"
      type:
        description: The type of the plan.
        allOf:
          - "$ref": "#/definitions/models.PlanType"
      updated_at:
        description: The timestamp indicating when the plan was last updated.
        type: string
        example: '2023-01-03T10:45:00Z'
      v1:
        type: array
        items:
          type: integer
  sql.NullString:
    type: object
    properties:
      string:
        type: string
      valid:
        description: Valid is true if String is not NULL
        type: boolean
  subscriptions.SubscriptionItem:
    type: object
    properties:
      created_at:
        description: created_at
        type: string
      id:
        description: id
        type: string
      plan_id:
        description: plan_id
        type: string
      properties:
        type: object
        additionalProperties: {}
      subscription_id:
        description: subscription_id
        type: string
      updated_at:
        description: updated_at
        type: string
  subscriptions.SubscriptionResponse:
    type: object
    properties:
      cancel_at_period_end:
        description: cancel_at_period_end
        type: boolean
      created_at:
        description: created_at
        type: string
      currency:
        description: currency
        type: string
      customer:
        "$ref": "#/definitions/customers.CustomerResponse"
      customer_id:
        description: customer_id
        type: string
      id:
        description: id
        type: string
      items:
        type: array
        items:
          "$ref": "#/definitions/subscriptions.SubscriptionItem"
      metadata:
        description: metadata
        type: array
        items:
          type: integer
      org_id:
        description: org_id
        type: string
      payment_method:
        description: payment_method
        allOf:
        - "$ref": "#/definitions/models.PaymentMethod"
      properties:
        type: object
        additionalProperties: {}
      reference:
        description: reference
        type: string
      source:
        description: source
        allOf:
        - "$ref": "#/definitions/models.BillingSource"
      start_at:
        description: start_at
        type: string
      status:
        description: status
        allOf:
        - "$ref": "#/definitions/models.SubscriptionStatus"
      updated_at:
        description: updated_at
        type: string
      v1:
        description: v1
        type: array
        items:
          type: integer
securityDefinitions:
  ApiKeyAuth:
    type: apiKey
    name: X-API-KEY
    in: header
